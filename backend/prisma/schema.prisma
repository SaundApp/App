generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  username             String                @unique
  bio                  String?
  name                 String
  email                String                @unique
  avatarId             String?               @db.ObjectId
  password             String?
  private              Boolean               @default(false)
  streams              Int?
  nationality          String?
  language             String                @default("en")
  genres               String[]
  spotifyId            String?
  stripeId             String?
  stripeCustomerId     String?
  notificationToken    String?
  verified             Boolean               @default(false)
  subscriptionSettings SubscriptionSettings?
  notificationSettings NotificationSettings

  listeners  Listener[] @relation("artist")
  listenerOf Listener[] @relation("listener")

  followers        Follows[]       @relation("following")
  following        Follows[]       @relation("follower")
  requestsReceived FollowRequest[] @relation("receiver")
  requestsSent     FollowRequest[] @relation("sender")
  posts            Post[]
  comments         Comment[]
  messagesSent     Message[]       @relation("sender")
  messagesReceived Message[]       @relation("receiver")
  subscriptions    Subscription[]  @relation("subscriber")
  subscribers      Subscription[]  @relation("subscribedTo")
  notifications    Notification[]
  attachments      Attachment[]
  spotifyToken     SpotifyToken?
}

type SubscriptionSettings {
  perks String[] @default([])
  price Float
}

type NotificationSettings {
  like           NotificationMethod[] @default([APP, PUSH])
  comment        NotificationMethod[] @default([APP, PUSH])
  follow         NotificationMethod[] @default([APP, PUSH])
  follow_request NotificationMethod[] @default([APP, PUSH]) @map("followRequest")
  mention        NotificationMethod[] @default([APP, PUSH])
  dm             NotificationMethod[] @default([APP, PUSH])
  leaderboard    NotificationMethod[] @default([APP, PUSH, EMAIL])
  post           NotificationMethod[] @default([APP, PUSH])
  mutedChats     String[]             @default([])
}

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  amount    Float

  user   User   @relation("subscriber", fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  subscribedTo   User   @relation("subscribedTo", fields: [subscribedToId], references: [id], onDelete: Cascade)
  subscribedToId String @db.ObjectId
}

model SpotifyToken {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  accessToken  String
  refreshToken String
  expiration   DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId
}

model Listener {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  count     Int
  updatedAt DateTime @default(now())
  artist    User     @relation("artist", fields: [artistId], references: [id], onDelete: Cascade)
  artistId  String   @db.ObjectId

  listener   User   @relation("listener", fields: [listenerId], references: [id], onDelete: Cascade)
  listenerId String @db.ObjectId

  @@unique([artistId, listenerId])
}

model Follows {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String @db.ObjectId
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String @db.ObjectId
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  image     String
  likes     String[] @default([])
  seen      String[] @default([])
  genres    String[]
  userId    String   @db.ObjectId
  url       String
  type      PostType
  spotifyId String   @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]

  @@unique([name, userId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId

  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  sender     User    @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String  @db.ObjectId
  receiver   User    @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String  @db.ObjectId
  replyId    String? @db.ObjectId
}

model Attachment {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  data      Bytes
  name      String
  userId    String         @db.ObjectId
  createdAt DateTime       @default(now())
  type      AttachmentType

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FollowRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  sender         User    @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String  @db.ObjectId
  receiver       User    @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId     String  @db.ObjectId
  notificationId String? @db.ObjectId

  @@unique([senderId, receiverId])
}

model Notification {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  text         String
  read         Boolean             @default(false)
  createdAt    DateTime            @default(now())
  involvedUser String?             @db.ObjectId
  button       NotificationButton?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

type NotificationButton {
  text String
  href String
}

enum NotificationMethod {
  EMAIL
  PUSH
  APP
}

enum PostType {
  ALBUM
  SONG
  PLAYLIST
}

enum AttachmentType {
  IMAGE
  AUDIO
  VIDEO
}
